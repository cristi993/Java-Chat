package serverul;

import java.awt.HeadlessException;
import java.util.*;
import java.io.*;
import java.net.*;
import javax.swing.JOptionPane;

public class serverGUI extends javax.swing.JFrame {

    Vector<User> onlineUsers;
    ServerSocket ss = null;
    Thread startSS = null;
    int Nb = 0;

    public serverGUI() {
        initComponents();
    }

    public class User {

        String name;
        PrintWriter pw;
        int ID;

        User(PrintWriter _pw, Integer _ID) {
            pw = _pw;
            ID = _ID;
            name = _ID.toString();
        }
    }

    public class StartServer implements Runnable {

        @Override
        public synchronized void run() {

            onlineUsers = new Vector<>();

            try {
                ss = new ServerSocket(1408);

                while (true) {
                    Socket cs = ss.accept();
                    PrintWriter pw = new PrintWriter(cs.getOutputStream());
                    onlineUsers.add(new User(pw, Nb++));

                    Thread client = new Thread(new HandlerClient(cs, pw));
                    client.start();
                    outputArea.append("Avem o conexiune. \n");
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Server - Eroare: nu se poate realiza serverul." + e.getMessage());
            }
        }
    }

    public class HandlerClient implements Runnable {

        BufferedReader bf;
        Socket cs;
        PrintWriter pw;

        public HandlerClient(Socket client, PrintWriter _pw) {
            
            pw = _pw;
            
            try {
                cs = client;
                InputStreamReader isr = new InputStreamReader(cs.getInputStream());
                bf = new BufferedReader(isr);
                
            } catch (IOException e) {

                JOptionPane.showMessageDialog(null, "Server - Eroare la initializarea StreamReaderului\n");
            }
        }

        @Override
        public synchronized void run() {

            String msg;
            String[] data;

            try {
                while ((msg = bf.readLine()) != null) {

                    outputArea.append("Input: " + msg + "\n");
                    data = msg.split("#");

                    for (String item : data) {

                        outputArea.append("+" + item + "\n");
                    }

                    switch (data[2]) {
                        case "Conectat":
                            if (addUser(data[0], Nb - 1)) {
                                spuneToti((data[0] + "#" + data[1] + "#" + "Msg"));
                            }
                            break;
                        case "Deconectat":
                            spuneToti((data[0] + "#S-a deconectat. :(" + "#" + "Msg"));
                            removeUser(data[0]);
                            break;
                        case "Msg":
                            spuneToti(msg);
                            break;
                        case "MsgUnul":
                            spuneUnul(msg);
                            break;
                        default:
                            JOptionPane.showMessageDialog(null, "Eroare la decodarea datelor. \n");
                            break;
                    }
                }
            } catch (IOException | HeadlessException e) {

                outputArea.append("Server - Conexiune pierduta. " + e.getMessage() + " \n");
                
                for (User item : onlineUsers) {
                    
                    if (item.pw == pw) {
                        
                        onlineUsers.remove(item);
                        break;
                    }
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setRows(5);
        jScrollPane1.setViewportView(outputArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startButton)
                    .addComponent(stopButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public synchronized void spuneToti(String msg) {

        Iterator it = onlineUsers.iterator();

        while (it.hasNext()) {

            try {
                User us = (User) it.next();
                us.pw.println(msg);
                outputArea.append("Output: " + msg + "\n");
                us.pw.flush();
                outputArea.setCaretPosition(outputArea.getDocument().getLength());

            } catch (Exception e) {

                JOptionPane.showMessageDialog(null, "Server - Eroare la a spune tuturor. \n");
            }
        }
    }

    public synchronized void spuneUnul(String msg, int id) {
        
        Iterator it = onlineUsers.iterator();
        User us = null;

        while (it.hasNext()) {

            us = (User) it.next();

            if (us.ID == id) {
                break;
            }
        }

        try {
            us.pw.println(msg);
            outputArea.append("Output: " + msg + "\n");
            us.pw.flush();
            outputArea.setCaretPosition(outputArea.getDocument().getLength());
            
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Server - Eroare transmiterea mesajului lui " + us.name);
        }
    }

    public synchronized void spuneUnul(String message) {
        
        Iterator it = onlineUsers.iterator();
        String[] temp = message.split("#");
        String[] data = temp[1].split("@");

        User us = null;
        byte both = 0;

        while (it.hasNext()) {

            us = (User) it.next();

            if (us.name.equals(data[1]) || us.name.equals(temp[0])) {

                try {
                    us.pw.println(temp[0] + "#" + data[0] + " #" + "Msg");
                    outputArea.append("Output: " + data[0] + "@" + data[1] + "\n");
                    us.pw.flush();
                    outputArea.setCaretPosition(outputArea.getDocument().getLength());
                    both++;

                    if (both == 2) {
                        break;
                    }
                } catch (Exception e) {

                    JOptionPane.showMessageDialog(null, "Server - Eroare transmiterea mesajului lui " + us.name);
                }
            }
        }
    }

    public synchronized boolean addUser(String nume, Integer ID) {

        String msg;
        outputArea.append("Inainte " + nume + " added. \n");

        for (User item : onlineUsers) {
            
            if (item.name.equals(nume)) {
                
                onlineUsers.lastElement().pw.println("# #Exista");
                outputArea.append("Output: " + "# #Exista" + "\n");
                onlineUsers.lastElement().pw.close();
                onlineUsers.remove(onlineUsers.lastElement());
                return false;
            }
        }

        for (User item : onlineUsers) {
            
            if (item.name.equals(ID.toString())) {
                
                item.name = nume;
                break;
            }
        }

        outputArea.append("Dupa " + nume + " added. \n");

        for (User item : onlineUsers) {
            
            msg = (item.name + "# #Conectat");
            spuneToti(msg);
        }

        spuneToti("Server# #Gata");
        return true;
    }

    public synchronized void removeUser(String nume) {

        String msg;

        for (User item : onlineUsers) {
            
            if (item.name.equals(nume)) {
                
                onlineUsers.remove(item);
                break;
            }
        }

        for (User item : onlineUsers) {

            msg = (item.name + "# #Conectat");
            spuneToti(msg);
        }

        spuneToti("Server# #Gata");
    }

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

        startSS = new Thread(new StartServer());
        startSS.start();

        outputArea.append("Server online. \n");
    }//GEN-LAST:event_startButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed

        spuneToti("Admin#Serverul se opreste si toata lumea va fi deconectata.#Msg");
        outputArea.append("Serverul se opreste \n");

        try {

            ss.close();
            ss = null;
            startSS.stop();

        } catch (IOException e) {

            JOptionPane.showMessageDialog(null, "Server - Eroare la inchiderea serverului: " + e.getMessage());
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    /*public static void main(String args[]) {
        /* Set the Nimbus look and feel 
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(serverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new serverGUI().setVisible(true);
            }
        });
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
